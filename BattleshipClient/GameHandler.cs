///////////////////////////////////////////////////////////
//  GameHandler.cs
//  Implementation of the Class GameHandler
//  Generated by Enterprise Architect
//  Created on:      12-ápr.-2013 16:13:05
//  Original author: hallgato
///////////////////////////////////////////////////////////


namespace BattleshipClient {

	public class GameHandler : IGame, IGameSuspender, IHitDetector {

		private PortSender ps;
		private GameBoard tabla;

		public GameHandler(PortSender ps) {
            this.ps = ps;
		}

		public bool CreateGame(int BoardSizeX, int BoardSizeY) {
			tabla = new GameBoard();
			tabla.sizeX = BoardSizeX;
			tabla.sizeY = BoardSizeY;

			if ((tabla.sizeX > 20) || (tabla.sizeY > 20)) {
				return false;
			} else if ((tabla.sizeX < 10) || (tabla.sizeY < 10)) {
				return false;
			} else {
				object[] args = new object[2];
				args[0] = BoardSizeX;
				args[1] = BoardSizeY;
				return (bool)ps.Send("game", "CreateGame", args);
			}
		}

		public bool EnemyAddedShipPositions() {
            object[] args = new object[0];
            tabla = (GameBoard)ps.Send("game", "EnemyAddedShipPositions", args);

            if (tabla.ShipPositions.Count == 14) {
                return true;
            }
            return false;			
		}

		public void SetShipPositions(ShipPosition ShipPositions) {
            object[] args = new object[1];
            args[0] = ShipPositions;
            ps.Send("game", "SetShipPositions", args);
		}

		public bool StartGame(int gameId) {
			object[] args = new object[1];
			args[0] = gameId;
			return (bool)ps.Send("game", "StartGame", args);
	        //TODO background workerrel timeout ha akarjuk.
		}

		public bool GameSuspend() {
			bool valasz = false;
			valasz = (bool)ps.Send("gamesuspender", "GameSuspend", null);
			return valasz;
		}

		public GameBoard GetEnemyShot() {
            object[] args = new object[0];
			tabla = (GameBoard)ps.Send("hitdetector", "GetEnemyShot", args);
			return tabla;
		}

		public GameBoard Shoot(int ShootX, int ShootY) {
			object[] args = new object[2];
			args[0] = ShootX;
			args[1] = ShootY;
			return (GameBoard)ps.Send("hitdetector", "Shoot", args);
		}

	}//end GameHandler
}
